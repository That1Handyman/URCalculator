import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

/*
 * Additional References:
 * 
 * Queue Iterator: http://www.techiedelight.com/iterate-through-queue-java/
 * HashMap methods: https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html 
 * 
 * Character to String conversion:
 * https://examples.javacodegeeks.com/core-java/character/how-to-convert-character-to-string-and-a-string-to-character-array-in-java/
 * 
 * Appending char to String
 * https://stackoverflow.com/questions/14444717/append-a-single-character-to-a-string-or-char-array-in-java
 * 
 * HashMap examples:
 * https://beginnersbook.com/2013/12/hashmap-in-java-with-example/
 * 
 * HashMaps & Stacks (From Slides):
 * http://cs.rochester.edu/courses/172/spring2018/lectures/l10.pdf
 */


public class URCalculator {

	
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.print(">>");
		
		Scanner in = new Scanner(System.in);
		String input = in.nextLine();	//NOTE:next() was only reading 5
		
		input = input.replaceAll("\\s", "");	// we remove all whitespaces
		
		ShuntingYard(input);
		
		
	}

	private static void ShuntingYard(String input) {
		// TODO Auto-generated method stub
		Queue<String> output = new LinkedList<String>();
		Stack<String> operators = new Stack<String>();
		HashMap<String,Integer> priorities = new HashMap();
		HashMap<String, Double> variables = new HashMap();
		
		Double default1 = 0.0;
		
		priorities.put(")",5);
		priorities.put("(",5);
		priorities.put("=", 4);
		priorities.put("^", 3);
		priorities.put("*", 2);
		priorities.put("/", 2);
		priorities.put("+", 1);
		priorities.put("-", 1);
		
		//Syntax for checking if character is digit ( very useful )
		//https://stackoverflow.com/questions/4047808/what-is-the-best-way-to-tell-if-a-character-is-a-letter-or-number-in-java-withou
		
		char tempArray[] = input.toCharArray();
		
		System.out.println(input);
		
		//ONE BIG FOR LOOP
		for ( int i = 0; i < tempArray.length; i++ ) {
				System.out.println(tempArray[i]);
				
				//If the Character is a digit
				if(Character.isDigit(tempArray[i])) {
					System.out.println("Is Digit" + tempArray[i]);
					String temp;
					
					//Then we convert to a temp string variable 
					temp = Character.toString(tempArray[i]);
					System.out.println("the temp added is " + temp);
					
					//To add to our String queue
					output.add(temp);
					
					
				}
				
				//For variables, we have to run through until there are no more characters in the array
				//Then we declare a new variable by inserting it into the hashmap
				if(Character.isLetter(tempArray[i])) {
					System.out.println("Is Letter" + tempArray[i]);
					String temp;	//declare new temp string
					//We need to create a temp string now that will keep attending additional chars that are part of that string
					
					temp = Character.toString(tempArray[i]);
					System.out.println(temp);
					
					while(Character.isLetter(tempArray[i + 1]) && tempArray[i + 1] != tempArray.length) {
						temp = temp + tempArray[i + 1];	//Appending char to string ( anticipates spacing )
						System.out.println(temp);
						i++;
					}
					
					System.out.println("The combined variable temp is " + temp );
					variables.put(temp, default1);
					System.out.println("Stored in HashMap" + variables.get(temp));
					System.out.println(" The value of Frank is " + variables.get("Frank") );
					
					output.add(temp);
				}
				
				//IF none of these if statements hold true, then we assume the char is an operator +-*/()
				
				//this is a dynamic temporary variable named "check"
				//It converts the character from the array if the other if statements are not valid
				String check = Character.toString(tempArray[i]);
				
				if(priorities.containsKey(check)) {		//If it is 
					System.out.println("We have in our HashMap " + check);
					Precedence(operators,priorities, check, output);				//PRECEDENCE METHOD
					//operators.push(check);
				}
				
		
		
		//QUEUE TEST ( Check what we have inside so far )
		System.out.println("Queue:");
		for(String s : output) { 
			  System.out.println(s.toString()); 
			}
		
			
		
	}
		
		EmptyStack(operators, output);		//EMPTY STACK METHOD
		PrintOutput(output);
		
}
	
	
private static void PrintOutput(Queue<String> output) {
		// TODO Auto-generated method stub
	
		System.out.println("Final Postfix expression:");
		for(String s : output) { 
			System.out.println(s.toString()); 
			}

		}


	/////////////////////////////////////////////////////////////////////EMPTY STACK AT END/////////////////////////////////////////////////////////////////////////	
	private static void EmptyStack(Stack<String> operators, Queue<String> output) {
		// TODO Auto-generated method stub
		
		while(!operators.isEmpty()) {
			String temp = operators.peek();
			output.add(temp);
			System.out.println("Adding from stack to queue " + temp );
			operators.pop();
		}
		
	}

///////////////////////////////////////////////////////////////////////////////PRECEDENCE////////////////////////////////////////////////////////////////////////	
	
	//I created a method that checks for precedence. This was to get some spacing and structure
	private static void Precedence(Stack<String> operators, HashMap<String, Integer> priorities, String check, Queue<String> output) {
		// TODO Auto-generated method stub
		
		//If empty then simply push
		if(operators.isEmpty()) {
			operators.push(check);
			System.out.println("Pushed " + operators.peek());
		}
		
		String temp = operators.peek();	// this is the stack's top
		
		//Higher Precedence
		if(priorities.get(temp) > priorities.get(check))  {
			System.out.println(temp + " Is greater than " + check);
			System.out.println("Inserting " + check);
			operators.push(check);
		}
		
		
		if(priorities.get(temp) < priorities.get(check))  {
			System.out.println(temp + " Is less than " + check);
			//System.out.println("Inserting " + check);
			while(priorities.get(temp) < priorities.get(check)) {
				output.add(temp);
				
			}
			//operators.push(check);
		}
		
	}
	
}
